<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NatRitmeyer.com]]></title>
  <link href="http://natritmeyer.com/atom.xml" rel="self"/>
  <link href="http://natritmeyer.com/"/>
  <updated>2013-10-28T19:10:42+00:00</updated>
  <id>http://natritmeyer.com/</id>
  <author>
    <name><![CDATA[Nat Ritmeyer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SitePrism 2.5]]></title>
    <link href="http://natritmeyer.com/blog/2013/10/28/siteprism-2-dot-5/"/>
    <updated>2013-10-28T18:53:00+00:00</updated>
    <id>http://natritmeyer.com/blog/2013/10/28/siteprism-2-dot-5</id>
    <content type="html"><![CDATA[<p>SitePrism 2.5 is made up mainly of contributions from various people. From the <a href="https://github.com/natritmeyer/site_prism/blob/master/HISTORY">HISTORY</a> file:</p>

<ul>
<li>added ability to select iframe by index &ndash; thanks to <a href="https://github.com/mikekelly">Mike Kelly</a></li>
<li>site_prism now does lazy loading &ndash; thanks to <a href="https://github.com/mrsutter">MrSutter</a></li>
<li>added config block and improved capybara integration &ndash; thanks to <a href="https://github.com/tmertens">tmertens</a> (and to <a href="https://github.com/LukasMac">LukasMac</a> for testing it)</li>
<li>changed #set_url to convert its input to a string &ndash; thanks to <a href="https://github.com/modsognir">Jared Fraser</a></li>
</ul>


<p>Due to various lame excuses I&rsquo;ve taken ages to get this version out so please forgive me.</p>

<p>To get an idea of the main functional changes, see the following sections of the <a href="https://github.com/natritmeyer/site_prism/blob/master/README.md">ReadMe</a>:</p>

<ul>
<li><a href="https://github.com/natritmeyer/site_prism#siteprism-configuration">SitePrism configuration to use capybara&rsquo;s implicit waits</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SitePrism</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_implicit_waits</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/natritmeyer/site_prism#using-capybara-query-options">Ability to use capybara&rsquo;s query options in page object definitions and assertions</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SearchResults</span> <span class="o">&lt;</span> <span class="ss">SitePrism</span><span class="p">:</span><span class="ss">:Page</span>
</span><span class='line'>  <span class="n">element</span> <span class="ss">:view_more</span><span class="p">,</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;View More&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@results_page</span><span class="o">.</span><span class="n">&lt;element_or_section_name</span><span class="o">&gt;</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s2">&quot;Welcome!&quot;</span>
</span><span class='line'><span class="vi">@results_page</span><span class="o">.</span><span class="n">has_</span><span class="o">&lt;</span><span class="n">element_or_section_name</span><span class="o">&gt;</span><span class="p">?</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">25</span>
</span><span class='line'><span class="vi">@results_page</span><span class="o">.</span><span class="n">has_no_</span><span class="o">&lt;</span><span class="n">element_or_section_name</span><span class="o">&gt;</span><span class="p">?</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s2">&quot;Logout&quot;</span>
</span><span class='line'><span class="vi">@results_page</span><span class="o">.</span><span class="n">wait_for_</span><span class="o">&lt;</span><span class="n">element_or_section_name</span><span class="o">&gt;</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">25</span>
</span><span class='line'><span class="vi">@results_page</span><span class="o">.</span><span class="n">wait_until_</span><span class="o">&lt;</span><span class="n">element_or_section_name</span><span class="o">&gt;</span><span class="n">_visible</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s2">&quot;Some ajaxy text appears!&quot;</span>
</span><span class='line'><span class="vi">@results_page</span><span class="o">.</span><span class="n">wait_until_</span><span class="o">&lt;</span><span class="n">element_or_section_name</span><span class="o">&gt;</span><span class="n">_invisible</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s2">&quot;Some ajaxy text disappears!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both changes supplied by <a href="https://github.com/tmertens">tmertens</a>, both changes being the last 2 gripes I hear from people about SitePrism :)</p>

<p>Thanks to <a href="https://github.com/LukasMac">LukasMac</a> for his extensive testing of this version.</p>

<p>Finally, add your project or company to the <a href="https://github.com/natritmeyer/site_prism/wiki/Who-is-using-SitePrism">Who is using SitePrism</a> page. It would make my day!</p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath Queries in Chrome]]></title>
    <link href="http://natritmeyer.com/blog/2013/10/22/xpath-queries-in-chrome/"/>
    <updated>2013-10-22T20:31:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/10/22/xpath-queries-in-chrome</id>
    <content type="html"><![CDATA[<p>Running xpath queries shouldn&rsquo;t be hard. It used to be that you&rsquo;d have to install
plugins into whatever browser you were using. They were often clumsy and always buggy.
And, even though querying using CSS selectors has grown more popular in the
automated-acceptance-web-test world, there are still sometimes that xpath is the only
option.</p>

<p>It turns out that Chrome has built in support for xpath queries in its dev tools. Simply
run the following in the console tab:</p>

<p><code>$x("your_xpath_here")</code></p>

<p>For example, run the following command in the console when the <code>http://www.google.co.uk</code>
page is loaded:</p>

<p><code>$x("//input[@name='q']")</code></p>

<p>Here&rsquo;s a screenshot of <code>$x("your_xpath")</code> in action:</p>

<p><img src="http://natritmeyer.com/images/chrome_xpath.png" /></p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A pattern for generating dynamic test data]]></title>
    <link href="http://natritmeyer.com/blog/2013/09/24/a-pattern-for-generating-dynamic-test-data/"/>
    <updated>2013-09-24T20:20:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/09/24/a-pattern-for-generating-dynamic-test-data</id>
    <content type="html"><![CDATA[<p>When writing acceptance tests that use test data (and that&rsquo;s most of them), I like to deal with abstractions of that data rather than
the data itself. The reasons for this are:</p>

<ul>
<li>Using abstractions leads to more expressive tests: <code>@expired_account</code> instead of <code>77481</code> better relays the intent of the test to the reader</li>
<li>Using abstractions frees me from worrying about the details of the test data &ndash; no hard coded IDs!</li>
<li>Lack of hard coded data means that when something needs to change I only need to change it in one place, leading to more robust and maintainable code</li>
<li>Test code is code &ndash; it should adhere to all the usual best practices for coding; abstraction is one of them</li>
</ul>


<p>To illustrate this let&rsquo;s compare the following two chunks of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@bob</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">AccountService</span><span class="o">.</span><span class="n">create_account_for</span> <span class="vi">@bob</span>
</span><span class='line'><span class="no">AccountService</span><span class="o">.</span><span class="n">should</span> <span class="n">have_account_for</span> <span class="vi">@bob</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;Bob&quot;</span>
</span><span class='line'><span class="vi">@age</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'><span class="vi">@country</span> <span class="o">=</span> <span class="s2">&quot;Botswana&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">AccountService</span><span class="o">.</span><span class="n">create_account_for</span> <span class="vi">@name</span><span class="p">,</span> <span class="vi">@age</span><span class="p">,</span> <span class="vi">@country</span>
</span><span class='line'>
</span><span class='line'><span class="n">xml</span> <span class="o">=</span> <span class="no">AccountService</span><span class="o">.</span><span class="n">account_details_for_user_with_details</span> <span class="vi">@name</span><span class="p">,</span> <span class="vi">@age</span><span class="p">,</span> <span class="vi">@country</span>
</span><span class='line'><span class="n">xml</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s2">&quot;//account/name&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@name</span>
</span><span class='line'><span class="n">xml</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s2">&quot;//account/name&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@age</span>
</span><span class='line'><span class="n">xml</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s2">&quot;//account/name&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="vi">@country</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which one more quickly and clearly transmits the intent of the test to the reader? I&rsquo;d argue that the first does. The reader is not distracted with unnecessary details; instead they know they are creating a new generic <code>Human</code> object, creating an account with it and then verifying that the account has been created. The second one achieves the same thing but uses a lot more code &ndash; figuring out the intent of the test takes more time and effort; the result is less maintainable too.</p>

<p>It doesn&rsquo;t take much work to use test data abstractions like <code>Human</code> and what little work is required is paid back many, many, many times over. Eg: creating the above <code>Human</code> class is as simple as this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;builder&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:age</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:country</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="s2">&quot;Bob&quot;</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>    <span class="vi">@country</span> <span class="o">=</span> <span class="s2">&quot;Botswana&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_xml</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="ss">Builder</span><span class="p">:</span><span class="ss">:XmlMarkup</span><span class="o">.</span><span class="n">new</span> <span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">instruct!</span> <span class="ss">:xml</span><span class="p">,</span> <span class="ss">:version</span> <span class="o">=&gt;</span> <span class="s2">&quot;1.0&quot;</span><span class="p">,</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">Human</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">name</span> <span class="vi">@name</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">age</span> <span class="vi">@age</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">country</span> <span class="vi">@country</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">target!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at what&rsquo;s going on.</p>

<p>The <code>initialize</code> method creates sensible default test data attributes when an instance of the <code>Human</code> class is created. The test data attributes are exposed using <code>attr_accessor</code>s so the test data object can be changed in the test. The <code>to_xml</code> method creates an XML representation of the human. This could just as well be a <code>to_json</code> method that spits out a json representation of the human*.</p>

<p><sub>
  * For those who take abstraction seriously this is a fine place to use the Template or Strategy patterns to decide between json and xml output at runtime.
</sub></p>

<p>Being able to create objects containing default test data that can be changed in the test will lead to more expressive test code (have I said that already?). Here&rsquo;s what I mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@baby</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@baby</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The defaults, other than <code>age</code> are sensible, so we&rsquo;ll leave them. The only one we need to change is <code>age</code>, so we override the default value with <code>1</code>. Now that the <code>@baby</code> instance of <code>Human</code> has been created, when we see <code>@baby</code> in the test code it will read nicely:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AccountService</span><span class="o">.</span><span class="n">create_account_for</span><span class="p">(</span><span class="vi">@baby</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="ss">:too_young</span>
</span></code></pre></td></tr></table></div></figure>


<p>But still, it would be nice to not have to change the age of <code>@baby</code> in the test &ndash; why can&rsquo;t this happen automatically?</p>

<p>Well, by using the <a href="https://en.wikipedia.org/wiki/Factory_method_pattern">Factory pattern</a> you can create specific instances of test data without cluttering up your test code. Factory classes are those that create instances of other classes, hiding any complicated setup. Eg:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HumanFactory</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">standard</span>
</span><span class='line'>    <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">baby</span>
</span><span class='line'>    <span class="n">human</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">human</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">human</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">too_old</span>
</span><span class='line'>    <span class="n">human</span> <span class="o">=</span> <span class="no">Human</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">human</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">500</span>
</span><span class='line'>    <span class="n">human</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Methuselah&quot;</span>
</span><span class='line'>    <span class="n">human</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#and to use the factory...</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@standard</span> <span class="o">=</span> <span class="no">HumanFactory</span><span class="o">.</span><span class="n">standard</span>
</span><span class='line'><span class="vi">@baby</span> <span class="o">=</span> <span class="no">HumanFactory</span><span class="o">.</span><span class="n">baby</span>
</span><span class='line'><span class="vi">@geriatric</span> <span class="o">=</span> <span class="no">HumanFactory</span><span class="o">.</span><span class="n">too_old</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus far we are able to dynamically create objects that represent test data.</p>

<p>There is one more important thing in this pattern &ndash; the separation between the data and the representation of the data. When we call <code>to_xml</code>, we get back a string containing an XML representation of the test data object. What&rsquo;s this for? Well, in your tests you can use the output of the method to pass to services, etc &ndash; that&rsquo;s what the <code>AccountService.create_account_for(@baby)</code> example is doing &ndash; the <code>to_xml</code> method would be called inside the <code>create_account_for</code> method.</p>

<p>An essential attribute of the <code>to_xml</code> method is that however many times it is called, unless the data changes it should always return the same thing. For this reason the following would be bad:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;builder&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:birthday</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="c1">#@birthday not set to sensible default :(</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_xml</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="ss">Builder</span><span class="p">:</span><span class="ss">:XmlMarkup</span><span class="o">.</span><span class="n">new</span> <span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">instruct!</span> <span class="ss">:xml</span><span class="p">,</span> <span class="ss">:version</span> <span class="o">=&gt;</span> <span class="s2">&quot;1.0&quot;</span><span class="p">,</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">Human</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">birthday</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="c1"># &lt;-- this is bad!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">target!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with the above is that in the <code>to_xml</code> method there is a call to something that will change every time it is called; <code>Time.now</code>. To illustrate the point here&rsquo;s what happens when you create an instance of the above class and call <code>to_xml</code> on it lots of times:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>irb(main):030:0&gt; puts bob.to_xml
</span><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'>&lt;Human&gt;
</span><span class='line'>  &lt;birthday&gt;2013-09-24 21:35:14 +0100&lt;/birthday&gt;
</span><span class='line'>&lt;/Human&gt;
</span><span class='line'>=&gt; nil
</span><span class='line'>irb(main):031:0&gt; puts bob.to_xml
</span><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'>&lt;Human&gt;
</span><span class='line'>  &lt;birthday&gt;2013-09-24 21:35:18 +0100&lt;/birthday&gt;
</span><span class='line'>&lt;/Human&gt;
</span><span class='line'>=&gt; nil
</span><span class='line'>irb(main):032:0&gt; puts bob.to_xml
</span><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'>&lt;Human&gt;
</span><span class='line'>  &lt;birthday&gt;2013-09-24 21:35:25 +0100&lt;/birthday&gt;
</span><span class='line'>&lt;/Human&gt;
</span><span class='line'>=&gt; nil
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, every time we call <code>bob.to_xml</code> his birthday changes. Not great. Instead, the <code>to_xml</code> code should be changed so that all it has to worry about is <em>presenting</em> the data. Here&rsquo;s how to do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;builder&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Human</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:birthday</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@birthday</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_xml</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="ss">Builder</span><span class="p">:</span><span class="ss">:XmlMarkup</span><span class="o">.</span><span class="n">new</span> <span class="ss">:indent</span> <span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">instruct!</span> <span class="ss">:xml</span><span class="p">,</span> <span class="ss">:version</span> <span class="o">=&gt;</span> <span class="s2">&quot;1.0&quot;</span><span class="p">,</span> <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">Human</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">b</span><span class="o">.</span><span class="n">birthday</span> <span class="vi">@birthday</span><span class="o">.</span><span class="n">strftime</span> <span class="s2">&quot;%Y-%m-%d&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">target!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time, when we call <code>to_xml</code> a number of times, we&rsquo;ll see that as well as the data being static, it is also now presented correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>irb(main):054:0&gt; bob = Human.new
</span><span class='line'>=&gt; #&lt;Human:0x007fc1c1d44d80 @birthday=2013-09-24 21:38:19 +0100&gt;
</span><span class='line'>irb(main):055:0&gt; puts bob.to_xml
</span><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'>&lt;Human&gt;
</span><span class='line'>  &lt;birthday&gt;2013-09-24&lt;/birthday&gt;
</span><span class='line'>&lt;/Human&gt;
</span><span class='line'>=&gt; nil
</span><span class='line'>irb(main):056:0&gt; puts bob.to_xml
</span><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'>&lt;Human&gt;
</span><span class='line'>  &lt;birthday&gt;2013-09-24&lt;/birthday&gt;
</span><span class='line'>&lt;/Human&gt;
</span><span class='line'>=&gt; nil
</span><span class='line'>irb(main):057:0&gt; puts bob.to_xml
</span><span class='line'>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
</span><span class='line'>&lt;Human&gt;
</span><span class='line'>  &lt;birthday&gt;2013-09-24&lt;/birthday&gt;
</span><span class='line'>&lt;/Human&gt;
</span><span class='line'>=&gt; nil
</span></code></pre></td></tr></table></div></figure>


<p>Summary:</p>

<ol>
<li>Create test data classes that represent types of test data you use in your acceptance tests (eg: <code>class Human</code>)</li>
<li>Expose attributes of those test data classes using accessors (eg: <code>attr_accessor :name</code>)</li>
<li>Set any attributes in the test data class to sensible defaults in the <code>initialize</code> method</li>
<li>Create <code>to_xml</code>/<code>to_json</code>/<code>to_csv</code>/etc rendering methods that will render the test data object in the formats required by your system under test</li>
<li>Ensure that rendering methods do not include any logic other than presentation logic</li>
<li>Use your test data classes in your test code</li>
<li>#win</li>
</ol>


<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to mount a SMB share on Mac OS X]]></title>
    <link href="http://natritmeyer.com/blog/2013/09/19/how-to-mount-a-smb-share-on-mac-os-x/"/>
    <updated>2013-09-19T13:17:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/09/19/how-to-mount-a-smb-share-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Mounting a remote SMB share on Mac OS X is done using the <code>mount_smbfs</code> tool. Here&rsquo;s how to do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#Create the mount point:</span>
</span><span class='line'>mkdir share_name
</span><span class='line'>
</span><span class='line'><span class="c">#Mount the share:</span>
</span><span class='line'>mount_smbfs //username:password@server.name/share_name share_name/
</span></code></pre></td></tr></table></div></figure>


<p>When you&rsquo;re done with the share, unmount it with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>umount share_name/
</span></code></pre></td></tr></table></div></figure>


<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A script to install chromedriver on linux]]></title>
    <link href="http://natritmeyer.com/blog/2013/09/11/a-script-to-install-chromedriver-on-linux/"/>
    <updated>2013-09-11T17:48:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/09/11/a-script-to-install-chromedriver-on-linux</id>
    <content type="html"><![CDATA[<p>Installing <a href="https://code.google.com/p/chromedriver/">chromedriver</a> on linux can be annoying.
Here&rsquo;s a script that takes the pain out of installing the <a href="https://code.google.com/p/chromedriver/downloads/list">latest</a>
(at time of writing!) 64 bit version of the driver:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>wget https://chromedriver.googlecode.com/files/chromedriver_linux64_2.3.zip
</span><span class='line'>unzip chromedriver_linux64_2.3.zip
</span><span class='line'>sudo cp chromedriver /usr/bin/chromedriver
</span><span class='line'>sudo chown root /usr/bin/chromedriver
</span><span class='line'>sudo chmod +x /usr/bin/chromedriver
</span><span class='line'>sudo chmod 755 /usr/bin/chromedriver
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve tested it on Fedora 19.</p>

<p>If you need a different version of the driver, just change the link on the first line of the script.</p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libs required for ruby dev on Fedora 19]]></title>
    <link href="http://natritmeyer.com/blog/2013/09/10/libs-required-for-ruby-dev-on-fedora-19/"/>
    <updated>2013-09-10T18:12:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/09/10/libs-required-for-ruby-dev-on-fedora-19</id>
    <content type="html"><![CDATA[<p>In setting up a <a href="https://fedoraproject.org/">Fedora 19</a> VM for web testing with <a href="https://www.google.com/chrome">Chrome</a>
I found that I needed to install a few packages before things started to work. After some trial-and-error, I came up
with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo yum install -y git vim gcc gcc-c++ ruby ruby-devel libxml2 libxml2-devel libxslt libxslt-devel
</span></code></pre></td></tr></table></div></figure>


<p>It should install everything you need to start coding in ruby (the above command assumes your code is stored in git and you&rsquo;re
using vim) &ndash; I had particular trouble trying to get <a href="http://nokogiri.org/">nokogiri</a> to work. But the above command solved it :)</p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to disable Fedora's screensaver from the command line]]></title>
    <link href="http://natritmeyer.com/blog/2013/09/10/how-to-disable-fedoras-screensaver-from-the-command-line/"/>
    <updated>2013-09-10T17:56:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/09/10/how-to-disable-fedoras-screensaver-from-the-command-line</id>
    <content type="html"><![CDATA[<p>Today I found myself building a Fedora-based VM for running some tests that require chrome. I needed
to be able to prevent the screensaver from starting, and after a bit of googling I figured out how
to do it. Here&rsquo;s the command you need to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gsettings <span class="nb">set </span>org.gnome.desktop.session idle-delay 0
</span></code></pre></td></tr></table></div></figure>


<p>I tested this on Fedora 19 but I guess it should work on any Gnome 3 distro&hellip;</p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to debug HTTParty requests]]></title>
    <link href="http://natritmeyer.com/blog/2013/09/09/how-to-debug-httparty-requests/"/>
    <updated>2013-09-09T19:42:00+01:00</updated>
    <id>http://natritmeyer.com/blog/2013/09/09/how-to-debug-httparty-requests</id>
    <content type="html"><![CDATA[<p>I very frequently find myself debugging http calls. Curl makes it easy to do this through its <code>-v</code> switch that lets you see exactly what it&rsquo;s doing. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -v http://www.google.co.uk
</span><span class='line'>* About to connect<span class="o">()</span> to www.google.co.uk port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>*   Trying 173.194.41.95... connected
</span><span class='line'>* Connected to www.google.co.uk <span class="o">(</span>173.194.41.95<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET / HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.21.4 <span class="o">(</span>universal-apple-darwin11.0<span class="o">)</span> libcurl/7.21.4 OpenSSL/0.9.8x zlib/1.2.5
</span><span class='line'>&gt; Host: www.google.co.uk
</span><span class='line'>&gt; Accept: */*
</span></code></pre></td></tr></table></div></figure>


<p>Hostname-to-IP resolution, any SSL handshaking as well as full header details are on display. If you&rsquo;re doing a
POST or PUT you get the body too. All very helpful.</p>

<p>But, once I&rsquo;ve figured out what I need my code to do I need to translate my curl incantations into <a href="http://johnnunemaker.com/httparty/">HTTParty</a> &ndash; currently my favourite ruby http library. It is possible to get
similar details out of httparty but it&rsquo;s a little esoteric.</p>

<p>Here&rsquo;s a fairly representative use of httparty:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;httparty&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Google</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">HTTParty</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base_uri</span> <span class="s2">&quot;http://www.google.co.uk&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">home_page</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">get</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">goog</span> <span class="o">=</span> <span class="no">Google</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">goog</span><span class="o">.</span><span class="n">home_page</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if I run that, I don&rsquo;t get any debug info (as expected):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ruby httparty_debug.rb
</span><span class='line'>&lt;!doctype html&gt;&lt;html <span class="nv">itemscope</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nv">itemtype</span><span class="o">=</span><span class="s2">&quot;http://schema.org/WebPage&quot;</span>&gt;&lt;head&gt;&lt;meta ...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>No headers, no hostname-to-ip resolution, no SSL details.</p>

<p>To get the debug info, add <code>debug_output $stdout</code> on a new line after <code>include HTTParty</code>, eg:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Google</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">HTTParty</span>
</span><span class='line'>  <span class="n">debug_output</span> <span class="vg">$stdout</span> <span class="c1"># &lt;= this is it!</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of running that will be a console filled with debug info!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ruby httparty_debug.rb
</span><span class='line'>opening connection to www.google.co.uk:80...
</span><span class='line'>opened
</span><span class='line'>&lt;- <span class="s2">&quot;GET / HTTP/1.1\r\nConnection: close\r\nHost: www.google.co.uk\r\n\r\n&quot;</span>
</span><span class='line'>-&gt; <span class="s2">&quot;HTTP/1.1 200 OK\r\n&quot;</span>
</span><span class='line'>-&gt; <span class="s2">&quot;Date: Mon, 09 Sep 2013 18:59:12 GMT\r\n&quot;</span>
</span><span class='line'>-&gt; <span class="s2">&quot;Expires: -1\r\n&quot;</span>
</span><span class='line'>...
</span><span class='line'>...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Note that if you&rsquo;d rather the debug info went to <code>$stderr</code>, change <code>debug_output $stdout</code> to <code>debug_output $stderr</code>.</p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
</feed>
